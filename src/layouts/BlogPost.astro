---
import type { RelatedPost } from '../utils/post';

import { BLOG, BLOG_TAGS } from '../constants';
import { join } from '../utils/path.ts';

import '../assets/css/pages/blog-post.css';
import '../assets/css/code.css';

import BaseLayout from './Base.astro';
import PostHeader from '../components/PostHeader/index.astro';
import TagList from '../components/TagList/index.astro';
import AuthorCard from '../components/AuthorCard/index.astro';
import PostCardSmall from '../components/PostCardSmall/index.astro';
import SkipToContent from '../components/SkipToContent/index.astro';

interface Props {
	title: string,
	summary: string,
	image?: ImageMetadata,
	imageAlt?: string,
	createdAt: Date,
	updatedAt?: Date,
	updates?: { date: Date, changes: string }[],
	tags?: string[],
	url: string,
	relatedPosts?: RelatedPost[],
	readingTime?: number,
	wordCount?: number,
	letterCount?: number
}

const {
	url,
	title, summary,
	image, imageAlt,
	createdAt, updatedAt, updates,
	tags,
	readingTime, wordCount, letterCount,
	relatedPosts
} = Astro.props;
const postUrl = join([BLOG.url, url]);
---
<BaseLayout
	htmlTitle={[title, 'Blog', 'Marco Campos']}
	title={title}
	description={summary}
	tags={tags}
	url={postUrl}
	image={image?.src}
	imageAlt={imageAlt}
	createdAt={createdAt}
	updatedAt={updatedAt}
	pageSchema="BlogPosting"
	hasFeed={true}
>
	<SkipToContent
		slot="header"
		title="Skip to post content"
		target="post-contents"
	/>
	<PostHeader
		slot="header"
		url={postUrl}
		title={title}
		summary={summary}
		image={image}
		imageAlt={imageAlt}
		createdAt={createdAt}
		updatedAt={updatedAt}
		hasUpdates={updates && updates.length > 0}
		readingTime={readingTime}
		wordCount={wordCount}
		letterCount={letterCount}
	/>

	<article id="post-contents" itemprop="articleBody" class="e-content">
		{updates && (
			<aside id="update-history">
				<details open>
					<summary>Update History</summary>
					<ul>
						{updates.map((update) => (
							<li>
								<time
									datetime={update.date.toISOString()}
									title={update.date.toISOString()}
								>
									{new Intl.DateTimeFormat('en-US', {
										dateStyle: 'long',
										timeStyle: 'short'
									}).format(update.date)}
								</time>
								<span>&mdash;</span>
								<span>{update.changes}</span>
							</li>
						))}
					</ul>
				</details>
			</aside>
		)}

		<slot></slot>
	</article>

	<hr />

	<footer slot="footer" id="post-footer">
		<AuthorCard author="marco" />

		<!-- <aside>
			<details>
				<summary>This post in other platforms</summary>
				<ul>
					<li>
						<a class="u-syndication u-as-downstream-duplicate u-alternate" rel="syndication" href="">...</a>
					</li>
				</ul>
			</details>
		</aside> -->
		<!-- <aside>
			<details>
				<summary>Comments and mentions</summary>
			</details>
		</aside> -->

		{tags && tags.length > 0 && (
			<TagList
				tags={Object.fromEntries(tags.map((tag) => [tag, join([BLOG_TAGS.url, tag])]))}
				isOpen={true}
			/>
		)}

		{relatedPosts && relatedPosts.length > 0 && (
			<details id="related-posts" open>
				<summary id="related-posts-title">Related Posts</summary>
				<div id="related-posts-wrapper">
					<nav aria-labelledby="related-posts-title">
						<ul>
							{relatedPosts.map((post) => (
								<li>
									<PostCardSmall
										url={join([BLOG.url, post.url])}
										image={post.image}
										imageAlt={post.imageAlt}
									>
										<span slot="title">{post.title}</span>
										{post.summary}
									</PostCardSmall>
								</li>
							))}
						</ul>
					</nav>
				</div>
			</details>
		)}

		<aside id="post-license">
			<small><em>Unless otherwise noted, all content on this site is licensed under a <a href="/license" class="u-license">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.</em></small>
		</aside>
	</footer>
</BaseLayout>
