---
import type { GetStaticPaths, InferGetStaticPropsType } from 'astro';

import { TALKS } from '../../constants.js';
import { join } from '../../utils/path.js';

import { listAllTalks } from '../../utils/talks.js';

import { Icon } from 'astro-icon/components';
import Logo from '../../components/Logo/index.astro';
import InternalPageLayout from '../../layouts/InternalPage.astro';

import '../../assets/css/pages/talks.css';
import '../../assets/css/code.css';

// eslint-disable-next-line @typescript-eslint/no-use-before-define
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

export const getStaticPaths = (async () =>
	(await listAllTalks()).map((talk) => ({
		params: {
			talk: talk.id
		},
		props: talk
	}))) satisfies GetStaticPaths;

// eslint-disable-next-line @typescript-eslint/unbound-method
const {
	render,
	data: {
		title,
		summary,
		date,
		isOnline,
		event,
		eventUrl,
		address,
		image,
		imageAlt,
		slides,
		video,
		code,
		demo,
		relatedContent,
		techStack
	}
} = Astro.props;
const { talk: talkId } = Astro.params;
const { Content } = await render();
const formatter = new Intl.DateTimeFormat('en-US', { dateStyle: 'long', timeStyle: 'long' });
---
<InternalPageLayout
	htmlTitle={[title, ...TALKS.title]}
	{title}
	description={summary}
	url={join([TALKS.url, talkId])}
	tags={TALKS.tags}
	image={image?.src}
	{imageAlt}
	createdAt={date}
	pageSchema="Event"
>
	<Logo
		subtitle="Talks"
		shortSubtitle="Talks"
		url={TALKS.url}
		urlTitle="Talks Page"
		slot="logo"
	/>
	<Fragment slot="header" itemprop="name">{title}</Fragment>

	<Content />

	<h2>
		<Icon name="uil:info-circle" title="" />
		Talk info
	</h2>

	<div itemprop="location" itemscope itemtype={isOnline ? 'https://schema.org/VirtualLocation' : 'https://schema.org/Place'} hidden>
		<meta itemprop={isOnline ? 'url' : 'address'} content={isOnline ? eventUrl : address} />
		<meta itemprop="eventAttendanceMode" content={isOnline ? 'https://schema.org/OnlineEventAttendanceMode' : 'https://schema.org/OfflineEventAttendanceMode'} />
		<meta itemprop="eventStatus" content="https://schema.org/EventScheduled" />
	</div>

	<ul id="talk-info">
		{
			event && (
				<li>
					<strong>
						<Icon name="uil:presentation-play" title="" />
						Event:
					</strong>
					<span>
						{eventUrl ? <a href={eventUrl} rel="noopener noreferrer" itemprop="url">{event}</a> : event}
					</span>
				</li>
			)
		}

		<li>
			<strong>
				<Icon name="uil:calendar-alt" title="" />
				Date:
			</strong>
			<meta itemprop="startDate" content={date ? date.toISOString() : '0000-01-01T00:00:00.000Z'} />
			{date ? <time datetime={date.toISOString()}>{formatter.format(date)}</time> : <span>&mdash;</span>}
		</li>

		{
			slides && (
				<li>
					<strong>
						<Icon name="uil:clapper-board" title="" />
						Slides:
					</strong>
					<a href={slides} rel="noopener noreferrer">{slides}</a>
				</li>
			)
		}

		{
			video && (
				<li>
					<strong>
						<Icon name="uil:video" title="" />
						Video:
					</strong>
					<a href={video} rel="noopener noreferrer">{video}</a>
				</li>
			)
		}

		{
			code && (
				<li>
					<strong>
						<Icon name="uil:brackets-curly" title="" />
						Code:
					</strong>
					<a href={code} rel="noopener noreferrer">{code}</a>
				</li>
			)
		}
	</ul>

	{
		relatedContent && (
			<Fragment>
				<h2>
					<Icon name="uil:file-share-alt" title="" />
					Related content
				</h2>
				<ul id="related-content">
					{
						relatedContent?.map(({ url: contentUrl, title: contentTitle }) => (
							<li>
								<a href={contentUrl} rel="noopener noreferrer">{contentTitle}</a>
							</li>
						))
					}
				</ul>
			</Fragment>
		)
	}

	<h2>
		<Icon name="uil:cog" title="" />
		Technologies used
	</h2>
	<ul id="technology-tags">
		{techStack?.map((tech) => <li class="tag">{tech}</li>)}
	</ul>

	{
		demo && (
			<Fragment>
				<h2>
					<Icon name="uil:flask" title="" />
					Demo
				</h2>

				<iframe
					src={demo}
					loading="lazy"
					referrerpolicy="no-referrer"
					sandbox="allow-forms allow-scripts allow-same-origin"
					title={`Demo for ${title}`}
				>
					A local running demo of the project.
				</iframe>
			</Fragment>
		)
	}
</InternalPageLayout>
