---
import Logo from '../components/Logo/index.astro';
import { BLOG, GLOBALS, TALKS } from '../constants.js';
import InternalPageLayout from '../layouts/InternalPage.astro';
import { listPostsByYearAndMonth } from '../utils/post.js';
import { listAllTalks } from '../utils/talks.js';

const baseUrl = new URL(GLOBALS.url, Astro.site).toString();

interface PageMetadata {
	title: string;
	description: string;
	url: string;
	wip?: true;
	hidden?: true;
}

const aboutPages: PageMetadata[] = [
	{ title: 'Home', url: baseUrl, description: "The website's home page." },
	{ title: 'About', url: new URL('/about/', baseUrl).toString(), description: 'More information about me.' },
	{ title: 'Accessibility Statement', url: new URL('/accessibility/', baseUrl).toString(), description: 'Statement about accessibility on the website.' },
	{ title: 'AI Statement', url: new URL('/ai/', baseUrl).toString(), description: 'Statement about the use of AI on the webstie and AI derivative work.' },
	{ title: 'Changelog', url: new URL('/changelog/', baseUrl).toString(), description: 'List of changes for the website.', wip: true },
	{ title: 'License & Disclaimer', url: new URL('/license/', baseUrl).toString(), description: "Legal jargon for the license of this website's content." },
	{
		title: 'Offline Page',
		url: new URL('/offline/', baseUrl).toString(),
		description: 'The page that shows when you go offline and the Service Worker is working properly.'
	},
	{ title: 'Sitemap', url: new URL('/sitemap/', baseUrl).toString(), description: 'This page.' },
	{ title: '404', url: new URL('/404/', baseUrl).toString(), description: 'The error page that you get when something is not found.' }
];

const coolPages: PageMetadata[] = [
	{ title: 'Bookmarks', url: new URL('/bookmarks/', baseUrl).toString(), description: 'A list of bookmars that I send people to.', wip: true },
	{ title: 'Food', url: new URL('/food/', baseUrl).toString(), description: 'Reference for food orders at different places. ðŸ˜‰' },
	{ title: 'Now', url: new URL('/now/', baseUrl).toString(), description: "What I'm doing right now.", wip: true },
	{ title: 'Projects', url: new URL('/projects/', baseUrl).toString(), description: "A list of personal projects I'm working on.", wip: true },
	{
		title: 'Styleguide',
		url: new URL('/styleguide/', baseUrl).toString(),
		description: "A reference for the website style, all it's components and different parts of the CSS.",
		wip: true
	},
	{ title: 'Pyramid Scheme', url: new URL('/triangle/', baseUrl).toString(), description: 'Join this cool club, you will not regret it!', hidden: true }
];

const talksUrl = new URL(TALKS.url, baseUrl).toString();
const talkPages: PageMetadata[] = [
	{ title: 'Talks Home', url: talksUrl, description: "A list of talks that I've presented before." },
	...(await listAllTalks()).map(({ id, data }) => ({
		title: data.title,
		url: new URL(id, talksUrl).toString(),
		description: data.summary
	}))
];

const blogUrl = new URL(BLOG.url, baseUrl).toString();
const blogPages = await listPostsByYearAndMonth();
---

<InternalPageLayout
	htmlTitle={['Site Map', ...GLOBALS.title]}
	title="Site Map"
	description="A list of all pages on the website."
	url="/sitemap/"
	tags={['site map', ...GLOBALS.tags]}
>
	<Logo
		subtitle="Site Map"
		shortSubtitle="Map"
		url="/sitemap/"
		urlTitle="Site Map Page"
		slot="logo"
	/>
	<Fragment slot="header">Site Map</Fragment>

	<h2>About Pages</h2>
	<ul>
		{
			aboutPages.map(({ url, title, description, hidden, wip }) => (
				<li class:list={{ wip, hidden }}>
					<span><a href={url}>{title}</a></span>
					<aside><em><small>{description}</small></em></aside>
				</li>
			))
		}
	</ul>
	<h2>Cool Pages</h2>
	<ul>
		{
			coolPages.map(({ url, title, description, hidden, wip }) => (
				<li class:list={{ wip, hidden }}>
					<span><a href={url}>{title}</a></span>
					<aside><em><small>{description}</small></em></aside>
				</li>
			))
		}
	</ul>
	<h2>Talks Pages</h2>
	<ul>
		{
			talkPages.map(({ url, title, description, hidden, wip }) => (
				<li class:list={{ wip, hidden }}>
					<span><a href={url}>{title}</a></span>
					<aside><em><small>{description}</small></em></aside>
				</li>
			))
		}
	</ul>
	<h2>Blog</h2>
	<ul>
		<li>
			<span><a href={blogUrl}>Blog Home</a></span>
			<aside><em><small>The blog main page.</small></em></aside>
		</li>

		{
			blogPages.entries().map(([year, months]) => (
				<li>
					<details>
						<summary>{year}</summary>
						<ul>
							{
								months.entries().map(([month, posts]) => (
									<li>
										<details>
											<summary>{month}</summary>
											<ul>
												{
													posts.map(({ url, data: { title, summary } }) => (
														<li>
															<span><a href={new URL(url, blogUrl).toString()}>{title}</a></span>
															<aside><em><small>{summary}</small></em></aside>
														</li>
													))
												}
											</ul>
										</details>
									</li>
								))
							}
						</ul>
					</details>
				</li>
			))
		}
	</ul>
</InternalPageLayout>
